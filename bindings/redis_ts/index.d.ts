/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** JavaScript-compatible types */
export interface StringInfo {
  key: string
  value: string
  ttl?: number
  type: string
  encoding: string
  size: number
}
export interface StringOperationJs {
  key: string
  value?: string
  ttl?: number
}
/** Module exports */
export declare function createClient(baseUrl: string): DbxRedisClient
export declare function createClientWithTimeout(baseUrl: string, timeoutMs: number): DbxRedisClient
/** NAPI wrapper for DBX Redis Client */
export declare class DbxRedisClient {
  /** Create a new DBX Redis client */
  constructor(baseUrl: string)
  /** Create a new DBX Redis client with custom timeout */
  static withTimeout(baseUrl: string, timeoutMs: number): DbxRedisClient
  /** Get the base URL of the client */
  getBaseUrl(): string
  /** Get access to string operations */
  string(): StringClient
  /** Get access to set operations */
  set(): SetClient
}
/** NAPI wrapper for String Operations */
export declare class StringClient {
  /** Get a string value by key */
  get(key: string): string | null
  /** Set a string value */
  set(key: string, value: string, ttl?: number | undefined | null): void
  /** Set a string value without TTL */
  setSimple(key: string, value: string): void
  /** Set a string value with TTL */
  setWithTtl(key: string, value: string, ttl: number): void
  /** Delete a string value */
  delete(key: string): boolean
  /** Get string information */
  info(key: string): StringInfo | null
  /** Batch get multiple strings */
  batchGet(keys: Array<string>): Array<string | undefined | null>
  /** Batch set multiple strings */
  batchSet(operations: Array<StringOperationJs>): void
  /** Get strings by patterns */
  getByPatterns(patterns: Array<string>, grouped?: boolean | undefined | null): string
}
/** NAPI wrapper for Set Operations */
export declare class SetClient {
  /** Add a single member to a set */
  addOne(key: string, member: string): number
  /** Add multiple members to a set */
  addMany(key: string, members: Array<string>): number
  /** Remove a member from a set */
  remove(key: string, member: string): number
  /** Get all members of a set */
  members(key: string): Array<string>
  /** Get the cardinality (size) of a set */
  cardinality(key: string): number
  /** Check if a member exists in a set */
  exists(key: string, member: string): boolean
  /** Convenience method to check if a member exists */
  contains(key: string, member: string): boolean
  /** Convenience method to get set size */
  size(key: string): number
  /** Intersect multiple sets */
  intersect(keys: Array<string>): Array<string>
  /** Union multiple sets */
  union(keys: Array<string>): Array<string>
  /** Get the difference of multiple sets */
  difference(keys: Array<string>): Array<string>
}
