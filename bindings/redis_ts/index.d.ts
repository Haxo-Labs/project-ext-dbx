/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface StringOperationJs {
  key: string
  value?: string
  ttl?: number
}
export interface StringInfoJs {
  key: string
  value: string
  ttl?: number
  type: string
  encoding: string
  size: number
}
/** Factory function to create a new DBX Redis client */
export declare function createClient(baseUrl: string): DbxRedisClient
/** Factory function to create a new DBX Redis client with timeout */
export declare function createClientWithTimeout(baseUrl: string, timeoutMs: number): DbxRedisClient
/** Factory function to create a new DBX Redis WebSocket client */
export declare function createWsClient(wsUrl: string): DbxWsClient
/** NAPI wrapper for String Operations */
export declare class StringClient {
  /** Get a string value by key */
  get(key: string): string | null
  /** Set a string value */
  set(key: string, value: string, ttl?: number | undefined | null): boolean
  /** Set a string value without TTL */
  setSimple(key: string, value: string): boolean
  /** Set a string value with TTL */
  setWithTtl(key: string, value: string, ttl: number): boolean
  /** Delete a string value */
  delete(key: string): boolean
  /** Get string information */
  info(key: string): StringInfoJs | null
  /** Batch get multiple strings */
  batchGet(keys: Array<string>): Array<string | undefined | null>
  /** Batch set multiple strings */
  batchSet(operations: Array<StringOperationJs>): void
  /** Get strings by patterns */
  getByPatterns(patterns: Array<string>, grouped?: boolean | undefined | null): string
}
export declare class StringInfoJs {
  key: string
  value: string
  ttl?: number
  type: string
  encoding: string
  size: number
}
/** NAPI wrapper for Set Operations */
export declare class SetClient {
  /** Add one member to a set */
  addOne(key: string, member: string): boolean
  /** Add multiple members to a set */
  addMany(key: string, members: Array<string>): boolean
  /** Remove a member from a set */
  remove(key: string, member: string): boolean
  /** Get all members of a set */
  members(key: string): Array<string>
  /** Get the cardinality (size) of a set */
  cardinality(key: string): number
  /** Check if a member exists in a set */
  exists(key: string, member: string): boolean
  /** Check if a member exists in a set (alias for exists) */
  contains(key: string, member: string): boolean
  /** Get the size of a set */
  size(key: string): number
  /** Get the intersection of multiple sets */
  intersect(keys: Array<string>): Array<string>
  /** Get the union of multiple sets */
  union(keys: Array<string>): Array<string>
  /** Get the difference of multiple sets */
  difference(keys: Array<string>): Array<string>
}
/** NAPI wrapper for WebSocket String Operations */
export declare class WsStringClient {
  /** Get a string value by key via WebSocket */
  get(key: string): string | null
  /** Set a string value via WebSocket */
  set(key: string, value: string, ttl?: number | undefined | null): boolean
  /** Set a string value without TTL via WebSocket */
  setSimple(key: string, value: string): boolean
  /** Set a string value with TTL via WebSocket */
  setWithTtl(key: string, value: string, ttl: number): boolean
  /** Delete a string value via WebSocket */
  delete(key: string): boolean
  /** Get string information via WebSocket */
  info(key: string): StringInfoJs | null
  /** Batch get multiple strings via WebSocket */
  batchGet(keys: Array<string>): Array<string | undefined | null>
  /** Batch set multiple strings via WebSocket */
  batchSet(operations: Array<StringOperationJs>): void
  /** Get strings by patterns via WebSocket */
  getByPatterns(patterns: Array<string>, grouped?: boolean | undefined | null): string
}
/** NAPI wrapper for WebSocket Set Operations */
export declare class WsSetClient {
  /** Add one member to a set via WebSocket */
  addOne(key: string, member: string): boolean
  /** Add multiple members to a set via WebSocket */
  addMany(key: string, members: Array<string>): boolean
  /** Remove a member from a set via WebSocket */
  remove(key: string, member: string): boolean
  /** Get all members of a set via WebSocket */
  members(key: string): Array<string>
  /** Get the cardinality (size) of a set via WebSocket */
  cardinality(key: string): number
  /** Check if a member exists in a set via WebSocket */
  exists(key: string, member: string): boolean
  /** Check if a member exists in a set via WebSocket (alias for exists) */
  contains(key: string, member: string): boolean
  /** Get the size of a set via WebSocket */
  size(key: string): number
  /** Get the intersection of multiple sets via WebSocket */
  intersect(keys: Array<string>): Array<string>
  /** Get the union of multiple sets via WebSocket */
  union(keys: Array<string>): Array<string>
  /** Get the difference of multiple sets via WebSocket */
  difference(keys: Array<string>): Array<string>
}
/** NAPI wrapper for DBX Redis Client (HTTP) */
export declare class DbxRedisClient {
  /** Create a new DBX Redis client */
  constructor(baseUrl: string)
  /** Create a new DBX Redis client with custom timeout */
  static withTimeout(baseUrl: string, timeoutMs: number): DbxRedisClient
}
/** NAPI wrapper for DBX Redis WebSocket Client */
export declare class DbxWsClient {
  /** Create a new DBX Redis WebSocket client */
  constructor(wsUrl: string)
}
