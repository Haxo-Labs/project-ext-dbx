/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration for DBX client */
export interface DbxConfig {
  /** DBX API base URL (e.g., "http://localhost:3000") */
  baseUrl: string
  /** Authentication username */
  username?: string
  /** Authentication password */
  password?: string
  /** Request timeout in milliseconds (default: 5000) */
  timeoutMs?: number
}
/** Response structure for API calls */
export interface DbxResponse {
  success: boolean
  data?: string
  error?: string
  operationId?: string
  executionTimeMs?: number
  backend?: string
}
/** DBX client for interacting with the Universal Database API */
export declare class DbxClient {
  /** Create a new DBX client */
  constructor(config: DbxConfig)
  /** Authenticate with the DBX API */
  authenticate(username: string, password: string): Promise<boolean>
  /** Set a value for a key */
  set(key: string, value: string, ttl?: number | undefined | null): Promise<DbxResponse>
  /** Get a value by key */
  get(key: string): Promise<DbxResponse>
  /** Update fields for a key (hash operations) */
  update(key: string, fieldsJson: string, ttl?: number | undefined | null): Promise<DbxResponse>
  /** Delete a key */
  delete(key: string): Promise<DbxResponse>
  /** Check if a key exists */
  exists(key: string): Promise<DbxResponse>
  /** Health check */
  health(): Promise<DbxResponse>
}
