name: Publish Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (e.g., v1.0.0)"
        required: true
        type: string
      docker_username:
        description: "Docker Hub username"
        required: false
        default: "effortlesslabs"
      npm_token:
        description: "NPM token for publishing"
        required: true
        type: string

env:
  # Docker Configuration
  DOCKER_USERNAME: ${{ github.event.inputs.docker_username || 'effortlesslabs' }}
  DOCKER_REPO: dbx
  DOCKER_PLATFORMS: linux/amd64,linux/arm64

  # NPM Configuration
  NPM_PACKAGE_NAME: dbx-sdk
  NPM_PACKAGE_ACCESS: public

  # Build Configuration
  TYPESCRIPT_BUILD_DIR: ts
  RUST_BUILD_DIR: .

  # Testing Configuration
  ENABLE_PARALLEL_TESTS: true
  RUST_TEST_CMD: cargo test --all
  TYPESCRIPT_TEST_CMD: npm run test:run

  # Error Handling
  MAX_RETRIES: 3
  RETRY_DELAY: 5
  ENABLE_AUTO_BACKUP: true
  ENABLE_AUTO_RESTORE: true

  # Logging
  DEBUG: false
  VERBOSE: true
  LOG_LEVEL: info

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Rust tests
        run: |
          cargo test --all
          cargo clippy --all -- -D warnings
        env:
          REDIS_URL: redis://localhost:6379

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: ts
        run: npm ci

      - name: Run TypeScript tests
        working-directory: ts
        run: npm run test:run

  publish:
    name: Publish Release
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ts/package-lock.json

      - name: Install TypeScript dependencies
        working-directory: ts
        run: npm ci

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Publish Release
        run: |
          # Set environment variables for the publishing script
          export DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}"
          export NPM_TOKEN="${{ github.event.inputs.npm_token || secrets.NPM_TOKEN }}"

          # Run the optimized publishing script
          ./scripts/publish-release.sh \
            --version "${{ steps.version.outputs.version }}" \
            --docker-username "${{ env.DOCKER_USERNAME }}" \
            --docker-password "${{ secrets.DOCKER_PASSWORD }}" \
            --npm-token "${{ github.event.inputs.npm_token || secrets.NPM_TOKEN }}" \
            --verbose
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          NPM_TOKEN: ${{ github.event.inputs.npm_token || secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Generate release notes based on git commits
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi

          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
          fi

          # Create release body
          RELEASE_BODY="## ðŸš€ Release $VERSION

          ### ðŸ“¦ Published Artifacts

          #### Docker Images
          - **Main Image**: \`${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:$VERSION\`
          - **Latest Tag**: \`${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:latest\`
          - **Railway Compatible**: \`${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${VERSION}-amd64-only\`
          - **Platforms**: ${{ env.DOCKER_PLATFORMS }}

          #### TypeScript SDK
          - **Package**: \`${{ env.NPM_PACKAGE_NAME }}@$VERSION\`
          - **Registry**: npm

          ### ðŸ”— Installation

          \`\`\`bash
          # Docker
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:$VERSION

          # TypeScript SDK
          npm install ${{ env.NPM_PACKAGE_NAME }}@$VERSION
          \`\`\`

          ### ðŸ“‹ Changes

          $CHANGELOG

          ### ðŸš€ Quick Start

          \`\`\`bash
          # Run with Docker
          docker run -d --name dbx-api -p 3000:3000 \\
            -e DATABASE_URL=redis://localhost:6379 \\
            ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:$VERSION

          # Use TypeScript SDK
          import { DBXClient } from '${{ env.NPM_PACKAGE_NAME }}';
          const client = new DBXClient('http://localhost:3000');
          \`\`\`"

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.release_body }}
          draft: false
          prerelease: false

  notify:
    name: Notify Success
    needs: [publish, create-release]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Success notification
        run: |
          echo "ðŸŽ‰ Release ${{ steps.version.outputs.version }} published successfully!"
          echo ""
          echo "ðŸ“¦ Published artifacts:"
          echo "  â€¢ Docker: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}:${{ steps.version.outputs.version }}"
          echo "  â€¢ NPM: ${{ env.NPM_PACKAGE_NAME }}@${{ steps.version.outputs.version }}"
          echo "  â€¢ GitHub Release: ${{ steps.version.outputs.version }}"
          echo ""
          echo "ðŸ”— Links:"
          echo "  â€¢ Docker Hub: https://hub.docker.com/r/${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO }}"
          echo "  â€¢ NPM: https://www.npmjs.com/package/${{ env.NPM_PACKAGE_NAME }}"
          echo "  â€¢ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
