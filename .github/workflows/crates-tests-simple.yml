name: DBX Crates Tests (Simple)

on:
  push:
    branches: [master]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/crates-tests-simple.yml"
      - "scripts/test-simple.sh"
  pull_request:
    branches: [master]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/crates-tests-simple.yml"
      - "scripts/test-simple.sh"

env:
  CARGO_TERM_COLOR: always

jobs:
  crates-test-simple:
    name: DBX Crates Test Suite (Simple)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust: [stable]
        features: [default, "async", "connection-pool", "all"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.features }}-
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: |
          if [ "${{ matrix.features }}" = "all" ]; then
            cargo clippy --workspace --features "async,connection-pool" -- -D warnings
          else
            cargo clippy --workspace --features "${{ matrix.features }}" -- -D warnings
          fi

      - name: Build crates package
        run: |
          if [ "${{ matrix.features }}" = "all" ]; then
            cargo build --workspace --features "async,connection-pool" --verbose
          else
            cargo build --workspace --features "${{ matrix.features }}" --verbose
          fi

      - name: Start DBX server
        run: |
          # Build the server
          cargo build -p redis_api --release

          # Start the server in background
          nohup cargo run -p redis_api --release > server.log 2>&1 &
          echo $! > server.pid

          # Wait for server to start
          sleep 10

          # Check if server is running
          if curl -s http://localhost:3000/redis/admin/ping > /dev/null; then
            echo "✅ Server is running"
          else
            echo "❌ Server failed to start"
            cat server.log
            exit 1
          fi
        env:
          REDIS_URL: redis://localhost:6379
          HOST: 0.0.0.0
          PORT: 3000
          POOL_SIZE: 10
          LOG_LEVEL: INFO

      - name: Make script executable
        run: chmod +x scripts/test-simple.sh

      - name: Run tests with simple script
        run: |
          # Run tests using the simple script
          ./scripts/test-simple.sh --verbose
        env:
          REDIS_URL: redis://localhost:6379
          DBX_BASE_URL: http://localhost:3000

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) 2>/dev/null || true
            rm server.pid
          fi

  crates-basic-check:
    name: Crates Basic Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check if crates compile
        run: cargo check --workspace --all-features

      - name: Build crates documentation
        run: cargo doc --workspace --all-features --no-deps

      # - name: Check crates package
      #   run: cargo package --workspace --allow-dirty
